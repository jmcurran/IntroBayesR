library(IntroBayesR)
library(Bolstad)
pi = seq(0,1,by=0.2)
pi.prior = rep(1/6, length(pi))
po
pi
pi.prior
?binodp
res = binodp(3, 8, pi, pi.prior)
pi = seq(0, 1, by  = 0.2)
pi.prior = rep(1/6, 6)
binodp(3, 8, pi, pi.prior)
library(Bolstad)
binodp(3, 8, pi, pi.prior)
??pch
library(IntroBayesR)
fig
fig
library(IntroBayesR)
root = "~/Dropbox/Books/Bill/IntroBayes"
setFileNames("A",root)
debug(setFileNames)
setFileNames("A",root)
i
grep("^.*([A-D]).*$", i)
library(IntroBayesR)
setFileNames("A",root)
library(IntroBayesR)
setFileNames("A",root)
l = setFileNames("A",root)
l
print(l)
?print
class(l)
library(IntroBayesR)
library(IntroBayesR)
class(l)
l
l
names(l)
l$fullName
library(IntroBayesR)
l
correctRefs("B", root)
l = setFileNames("B",root)
l
library(IntroBayesR)
correctRefs("B", root)
correctRefs("B", root)
path
src
library(IntroBayesR)
correctRefs("B", root)
library(IntroBayesR)
correctRefs("B", root)
correctRefs(LETTERS[1:4], root)
library(IntroBayesR)
addFigLabels(LETTERS[1:4], root)
addFigureLabels(LETTERS[1:4], root)
library(IntroBayesR)
library(IntroBayesR)
addFigureLabels(LETTERS[1:4], root)
addTableLabels(LETTERS[1:4], root)
correctRefs(1:20, root)
findRE("\\.mac", 1:20)
library(IntroBayesR)
findRE("\\.mac", 1:20)
findRE("\\.mac", 1:20, root)
pi = seq(0, 1, length = 1000)
g = function(pi){}
g = function(pi){
r = rep(0, length(pi))
r[pi >= 0 & pi < 0.1] = 20 * pi[pi >=0 & pi < 0.1]
r[pi >= 0.1 & pi < 0.3] = 2
r[pi >= 0.3 & pi < 0.5] = 5 - 10 * pi[pi >= 0.3 & pi < 0.5]
return(r)
}
gp = g(pi)
plot(gp~pi)
plot(gp~pi, type = 'l')
?bingcp
l = bindp(26, 100, pi, gp)
l = binodp(26, 100, pi, gp)
library(Bolstad)
l = binodp(26, 100, pi, gp)
l = dbinom(26, size = 100, prob = pi)
l
lgp
lgp = l*gp
plot(pi,lgp)
?sintegral
post = sintegral(pi, lgp)
post
post = post$cdf$y/post$value
post
plot(pi,post)
plot(post)
plot(pi,post,type='l')
post
post = sintegral(pi, lgp)
post$cdf$y = post$cdf$y / post$value
plot(post$x, post$y)
post$y
plot(post$cdf$x, post$cdf$y)
sum(post$cdf$x*post$cdf$y)
lgp
post = lgp / post$value
post
plot(pi,post)
sintegral(pi, pi*post)
sintegral(pi, pi*post)$value
library(IntroBayesR)
sintegral(pi, pi*post)$value
sintegral(pi, pi*post)
library(IntroBayesR)
sintegral(pi, pi*post)
r = sintegral(pi, pi*post)
r
library(IntroBayesR)
r = sintegral(pi, pi*post)
library(Bolstad)
r = sintegral(pi, pi*post)
r
r$value
pi = seq(0, 1, length = 1000)
g = function(pi){
cond1 = pi >=0 & pi < 0.1
cond2 = pi >=0.1 & pi < 0.3
cond3 = pi >=0.3 & pi < 0.5
r = rep(0, length(pi))
r[cond1] = 20 * pi[cond1]
r[cond2] = 2
r[cond3] = 5 - 10 * pi[cond]
return(r)
}
lgp = pi * g(pi)
pi = seq(0, 1, length = 1000)
g = function(pi){
cond1 = pi >=0 & pi < 0.1
cond2 = pi >=0.1 & pi < 0.3
cond3 = pi >=0.3 & pi < 0.5
r = rep(0, length(pi))
r[cond1] = 20 * pi[cond1]
r[cond2] = 2
r[cond3] = 5 - 10 * pi[cond3]
return(r)
}
lgp = pi * g(pi)
plot(pi, lgp)
plot(pi,g(pi))
n = 100
x = 26
lgp = dbinom(26, size = n, prob = pi) * g(pi)
plot(pi, lgp)
plot(pi, lgp, type = 'l')
class(gp)
class(g)
post = list(x = pi, y = lgp / denom)
denom = sintegral(pi, lgp)$value
post = list(x = pi, y = lgp / denom)
?integrate
integrate(approxfun(lgp, pi))
integrate(approxfun(lgp, pi), 0, 1)
fx = approxfun(pi, lgp)
integrate(fx, 0, 1)
plot(fx)
denom
denom = sintegral(pi, lgp)$value
post = list(x = pi, y = lgp / denom)
plot(y~x, post)
plot(y~x, post, type = 'l')
sintegrate(post$x, post$y)
sintegral(post$x, post$y)
sintegral(post$x, post$y)$vale
sintegral(post$x, post$y)$value
mx = sintegral(post$x, post$y * post$x)
vx = sintegral(post$x, post$y * (post$x - mx)^2)
mx = sintegral(post$x, post$y * post$x)$value
vx = sintegral(post$x, post$y * (post$x - mx)^2)$value
mx
vx
sqrt(vx)
cdf = sintegral(post$x, post$y * post$x)$cdf
cdf
cdf = sintegral(post$x, post$y)$cdf
plot(cdf)
quantile = approxfun(cdf$y, cdf$x)
rm(quantile)
invCDF = approxfun(cdf$y, cdf$x)
q1 = invCDF(0.25)
cdf = sintegral(post$x, post$y)$cdf
invCDF = approxfun(cdf$y, cdf$x)
med = invCDF(0.5)
q1 = invCDF(0.25)
q3 = invCDF(0.75)
iqr = q3 - q1
mx
med
iqr
sqrt(vx)
N = 1e5
pi = seq(0, 1, length = N)
g = function(pi){
cond1 = pi >=0 & pi < 0.1
cond2 = pi >=0.1 & pi < 0.3
cond3 = pi >=0.3 & pi < 0.5
gp = rep(0, length(pi))
gp[cond1] = 20 * pi[cond1]
gp[cond2] = 2
gp[cond3] = 5 - 10 * pi[cond3]
return(r)
}
n = 100
x = 26
lgp = dbinom(26, size = n, prob = pi) * g(pi)
pi
gp
N = 1e5
pi = seq(0, 1, length = N)
g = function(pi){
cond1 = pi >=0 & pi < 0.1
cond2 = pi >=0.1 & pi < 0.3
cond3 = pi >=0.3 & pi < 0.5
gp = rep(0, length(pi))
gp[cond1] = 20 * pi[cond1]
gp[cond2] = 2
gp[cond3] = 5 - 10 * pi[cond3]
return(r)
}
plot(pi,g(pi))
gp = g(pi)
length(gp)
length(pi)
g = function(pi){
cond1 = pi >=0 & pi < 0.1
cond2 = pi >=0.1 & pi < 0.3
cond3 = pi >=0.3 & pi < 0.5
gp = rep(0, length(pi))
gp[cond1] = 20 * pi[cond1]
gp[cond2] = 2
gp[cond3] = 5 - 10 * pi[cond3]
return(gp)
}
n = 100
x = 26
lgp = dbinom(26, size = n, prob = pi) * g(pi)
plot(pi, lgp, type = 'l')
denom = sintegral(pi, lgp)$value
denom
post = list(x = pi, y = lgp / denom)
mx = sintegral(post$x, post$y * post$x)$value
vx = sintegral(post$x, post$y * (post$x - mx)^2)$value
cdf = sintegral(post$x, post$y)$cdf
invCDF = approxfun(cdf$y, cdf$x)
med = invCDF(0.5)
q1 = invCDF(0.25)
q3 = invCDF(0.75)
iqr = q3 - q1
med
q1
q3
iqr
ci = invCDF(c(0.025,0.975))
ci
ci.approx = mx + c(-1,1)*qnorm(0.975)*sqrt(sx)
ci.approx = mx + c(-1,1)*qnorm(0.975)*sqrt(vx)
ci.approx
?binogcp
post = binogcp(x, n, "user", pi, pi.prior)
N = 1e5
pi = seq(0, 1, length = N)
post = binogcp(x, n, "user", pi = pi, pi.prior = g(pi))
str(post)
mx = sintegral(post$param.x, post$posterior * post$param.x)$value
mx
vx = sintegral(post$param.x, post$posterior * (post$param.x - mx)^2)$value
cdf = sintegral(post$param.x, post$posterior)$cdf
invCDF = approxfun(cdf$y, cdf$x)
med = invCDF(0.5)
q1 = invCDF(0.25)
q3 = invCDF(0.75)
iqr = q3 - q1
ci = invCDF(c(0.025,0.975))
ci.approx = mx + c(-1,1)*qnorm(0.975)*sqrt(vx)
ci
ci.approx
\include{amsmath}
library(IntroBayesR)
library(IntroBayesR)
source('~/.active-rstudio-document', echo=TRUE)
normmixp
?normmixp
?binomixp
binomixp
N = 1e6
numer = rbeta(N, 50, 2)
denom = rbeta(N 2, 52)
ratio = numer / denom
probs = c(0.025, 0.05, 0.5, 0.95, 0.975)
quantiles(ratio, probs)
N = 1e6
numer = rbeta(N, 50, 2)
denom = rbeta(N 2, 52)
ratio = numer / denom
probs = c(0.025, 0.05, 0.5, 0.95, 0.975)
quantile(ratio, probs)
N = 1e6
numer = rbeta(N, 50, 2)
denom = rbeta(N, 2, 52)
ratio = numer / denom
probs = c(0.025, 0.05, 0.5, 0.95, 0.975)
quantile(ratio, probs)
N = 1e6
numer = rbeta(N, 50, 2)
denom = rbeta(N, 2, 52)
ratio = numer / denom
probs = c(0.025, 0.05, 0.5, 0.95, 0.975)
round(quantile(ratio, probs), 2)
findRE
findRE("(Minitab|\\.mac)", 11, root)
?binobp
library(IntroBayesR)
root
findRE("(\\.mac|Minitab", 11, root)
?findRE
findRE("(\\.mac|Minitab)", 11, root)
library(IntroBayesR)
findRE("Bayes theorem")
root
?findRE
findRE
findRE("Bayes theorem", root = root)
findRE("Bayes' theorem", root = root)
findRE("Bayes theorem", root = root)
?grepl
library(IntroBayesR)
patt = "\bIf\b(?:(?!\bthen\b).)*?"
grep(patt, "If a, then b.")
patt = "\\bIf\\b(?:(?!\\bthen\\b).)*?"
grep(patt, "If a, then b.")
findRE("^If", root = root)
findRE("^If.*$", root = root)
findRE("If", root = root)
findRE(".*If.*", root = root)
findRE("If", root = root)
test "If James then bill"
test = "If James then bill"
grep(test, "If")
grep(test, "^If.*")
grep(test, "^If.*$")
grep("If", test)
findRE(pattern = "If", root = root)
findRE(pattern = "If", 1, root = root)
library(IntroBayesR)
setwd("~/Dropbox/Books/Bill/IntroBayes/Chapter17")
knit("Chapter17bill.Rnw")
Lines = readLines("Chapter17bill.Rnw")
Lines = paste0(Lines, collapse = "\n")
Lines
Lines = gsub("[\n]{2}", "", Lines)
Lines
Lines = unlist(strsplit(Lines, "\n"))
Lines
wc -l lines
length(Lines)
Lines = readLines("Chapter17bill.Rnw")
Lines = paste0(Lines, collapse = "\n")
substr(Lines, 0, 100)
Lines0 = Lines
Lines0 = gsub("\n\n", "", Lines)
Lines0 = gsub("\n\n", "\n", Lines)
unlist(strsplit(Lines0, "\n"))
system("wc -l Chapter17-old.Rnw")
writeLines()
?writeLines
Lines = unlist(strsplit(Lines0, "\n"))
writeLines(Lines, "Chapter17bill.Rnw")
knit("Chapter17bill.Rnw")
?knit
knit("Chapter17bill.Rnw", "Chapter17.tex")
knit("Chapter17bill.Rnw", "Chapter17.tex")
knit("Chapter17bill.Rnw", "Chapter17.tex")
knit("Chapter17bill.Rnw", "Chapter17.tex")
knit("Chapter17bill.Rnw", "Chapter17.tex")
library(IntroBayesR)
Sprintf = function(fmt, ...){
strOut = sprintf(fmt, ...)
if(any(grepl("^0\\..+$", strOut))){
strOut = gsub("([^0-9])*0(\\.[0-9]+)$", "\\1\\2", strOut)
}
return(strOut)
}
u = runif(2)
Sprintf("%.7f,%.7f", u[1], u[2])
Sprintf = function(fmt, ...){
strOut = sprintf(fmt, ...)
if(any(grepl("^0\\..+$", strOut))){
strOut = gsub("([^0-9])*0(\\.[0-9]+)", "\\1\\2", strOut)
}
return(strOut)
}
Sprintf("%.7f,%.7f", u[1], u[2])
Sprintf("%.7f,%.7f and %.7f", u[1], u[2], u[1])
library(IntroBayesR)
countAmp = function(rng = 1:20, root){
for(i in rng){
f = setFileNames(i, root)
cat(f$fName, "\n")
Lines = readLines(f$fullName)
tblLoc = cbind(grep("^.*\\\\begin\\{tabular[*]*\\}", Lines) ,grep("^.*\\\\end\\{tabular[*]*\\}", Lines))
nTables = nrow(tblLoc)
for(tbl in 1:nTables){
start = tblLoc[tbl, 1] + 1 ## the headers have been manually corrected
end = tblLoc[tbl, 2] -1
tblLines = Lines[start:end]
tblLines = gsub("[^&]", "", tblLines)
cat(paste0("Table ", tbl, " at line ", start - 1, "\n"))
cat(paste(nchar(tblLines), "\n"))
cat(paste("\n"))
}
}
}
library(IntroBayesR)
rm(countAmp)
root
countAmp('B', root)
install.packages("Rcpp")
library(IntroBayesR)
